int solution(vector<int> &A) {
    size_t n = A.size();
    if (n <= 1)
    {
        return 0;
    }
    //it is only possible to have equi leaders if there are leaders, evaluate for leaders, and which one
    int bestLeaderSoFar = A[0];
    int leaderStrength = 0;
    for (int a : A)
    {
        if (a == bestLeaderSoFar)
        {
            ++leaderStrength;
        }
        else
        {
            --leaderStrength;
            if (leaderStrength < 0)
            {
                leaderStrength = 1;
                bestLeaderSoFar = a;
            }
        }
    }
    //confirm if this is indeed the leader
    unsigned int counter = 0;
    for (int a : A)
    {
        if (a == bestLeaderSoFar)
        {
            ++counter;
        }
    }
    if (counter * 2 <= n)
    {
        //no leader, so no equi leaders
        return 0;
    }
    //bestLeaderSoFar is the leader of A
    int equiLeadersFound = 0;
    unsigned int counterSoFar = 0;
    unsigned int counterAhead = counter;
    //find equi leaders, if possible
    size_t lastPossibleS = n - 2;
    for (size_t s = 0; s <= lastPossibleS; ++s)
    {
        if (A[s] == bestLeaderSoFar)
        {
            ++counterSoFar;
            --counterAhead;
        }
        //evaluate for equi leader
        if (counterSoFar * 2 > s + 1
            && counterAhead * 2 > n - (s + 1))
        {
            ++equiLeadersFound;
        }
    }
    return equiLeadersFound;
}